local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

-- Function to format numbers with suffixes
local function format_number(number)
    local suffixes = {
        "", "K", "M", "B", "T", "QD", "QN", "SX", "SP", "OC", "NO", "DC",
        "UnD", "DD", "TD", "QaD", "QiD", "SD", "SpD", "OcD", "NoD", "ViG"
    }
    local suffix_index = 1

    while math.abs(number) >= 1000 and suffix_index < #suffixes do
        number = number / 1000.000
        suffix_index = suffix_index + 1
    end

    return string.format("%.2f%s", number, suffixes[suffix_index])
end

-- Function to calculate average stats
local function calculate_average_stats(player)
    local data = ReplicatedStorage:FindFirstChild("Datas") and ReplicatedStorage.Datas:FindFirstChild(player.UserId)
    if not data then return "0" end

    local strength = data:FindFirstChild("Strength") and data.Strength.Value or 0
    local energy = data:FindFirstChild("Energy") and data.Energy.Value or 0
    local defense = data:FindFirstChild("Defense") and data.Defense.Value or 0
    local speed = data:FindFirstChild("Speed") and data.Speed.Value or 0

    local average = (strength + energy + defense + speed) / 4
    return format_number(average)
end

-- Function to get the current quest of the player
local function get_current_quest(player)
    local data = ReplicatedStorage:FindFirstChild("Datas") and ReplicatedStorage.Datas:FindFirstChild(player.UserId)
    if not data then return "None" end

    local quest = data:FindFirstChild("Quest")
    return quest and quest.Value or "None"
end

-- Setup leaderboard for each player
local function setup_leaderboard(player)
    -- Create the leaderboard folder
    local leaderstats = Instance.new("Folder")
    leaderstats.Name = "leaderstats"
    leaderstats.Parent = player

    -- Add "Rebirths"
    local rebirths = Instance.new("IntValue")
    rebirths.Name = "Rebirths"
    rebirths.Value = 0
    rebirths.Parent = leaderstats

    -- Add "Stats"
    local stats = Instance.new("StringValue")
    stats.Name = "Stats"
    stats.Value = "0"
    stats.Parent = leaderstats

    -- Add "CurrentQuest"
    local currentQuest = Instance.new("StringValue")
    currentQuest.Name = "CurrentQuest"
    currentQuest.Value = "None"
    currentQuest.Parent = leaderstats

    -- Update stats and current quest dynamically
    local function update_values()
        while task.wait(0.5) do
            if player.Parent then
                -- Update Rebirths
                local data = ReplicatedStorage:FindFirstChild("Datas") and ReplicatedStorage.Datas:FindFirstChild(player.UserId)
                rebirths.Value = data and data:FindFirstChild("Rebirth") and data.Rebirth.Value or 0

                -- Update average stats
                stats.Value = calculate_average_stats(player)

                -- Update current quest
                currentQuest.Value = get_current_quest(player)
            else
                break
            end
        end
    end

    task.spawn(update_values)
end

-- Listen for players joining
Players.PlayerAdded:Connect(function(player)
    setup_leaderboard(player)
end)

-- For players already in the game (Studio testing)
for _, player in ipairs(Players:GetPlayers()) do
    setup_leaderboard(player)
end
